name: Pro Deployment

on:
  push:
    branches:
      - main
  pull_request:

env:
  IMAGE_NAME: sampleapp
  DOCKERFILE: app/Dockerfile
  IMAGEPULLSECRET_NAME: ghcrsecret

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build ./app --file $DOCKERFILE --tag $IMAGE_NAME
      
      - name: Save image as Tar
        run: docker save --output ${{ format('{0}/{1}.tar', github.workspace, env.IMAGE_NAME) }} $IMAGE_NAME
      
      - name: Publish image as artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          name: containerImage
          path: ${{ format('{0}/{1}.tar', github.workspace, env.IMAGE_NAME) }}
          if-no-files-found: error

  # Push image to GitHub Container Registry.
  push:
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2   
      
      - name: Download the image
        uses: actions/download-artifact@v2.0.8
        with:
          name: containerImage
          path: ${{ github.workspace }} 
      
      - name: Load the image from Tar
        # Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: docker load --input ${{ format('{0}/{1}.tar', github.workspace, env.IMAGE_NAME) }}
    
      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:${{ github.run_id }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          docker tag $IMAGE_NAME $IMAGE_ID
          docker push $IMAGE_ID

      - name: Publish Manifests
        uses: actions/upload-artifact@v2.2.2
        with:
          name: manifests
          path: kubernetes
          if-no-files-found: error

  # Deploy to AKS
  deploy:
    needs: [push]      
    runs-on: ubuntu-latest
    environment: 
      name: Production
    steps:
      - name: Download the manifests
        uses: actions/download-artifact@v2.0.8
        with:
          name: manifests
          path: ${{ github.workspace }}/k8s 
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Login to AKS
        uses: azure/aks-set-context@v1
        with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'
            resource-group: 'K8S_Examples'
            cluster-name: 'K8S_Examples_cluster'
        id: login
      
      - name: Create secret in AKS
        uses: Azure/k8s-create-secret@v1.1
        with:
          container-registry-url: https://ghcr.io
          container-registry-username: n3wt0n
          container-registry-password: ${{ secrets.CR_PAT }}
          secret-type: docker-registry
          secret-name: ${{ env.IMAGEPULLSECRET_NAME }}          
    
      - name: Deploy to AKS
        uses: Azure/k8s-deploy@v1.3
        with:
          manifests: ${{ github.workspace }}/k8s
          images: ghcr.io/${{ github.repository_owner }}/${{env.IMAGE_NAME}}:${{ github.run_id }}
          imagepullsecrets: ${{ env.IMAGEPULLSECRET_NAME }}
          action: deploy
